package api

import (
	"context"
	corev1alpha1 "github.com/gardener/scaling-advisor/api/core/v1alpha1"
	mkapi "github.com/gardener/scaling-advisor/minkapi/api"
	corev1 "k8s.io/api/core/v1"
	nodev1 "k8s.io/api/node/v1"
	schedulingv1 "k8s.io/api/scheduling/v1"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/client-go/dynamic"
	"k8s.io/client-go/dynamic/dynamicinformer"
	"k8s.io/client-go/informers"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/tools/events"
	"time"
)

const (
	// ServiceName is the name of the scaling advisor service.
	ServiceName = "scaling-advisor"
)

// ScalingAdviceResponseType defines the type of response that can be sent by the scaling advisor service.
type ScalingAdviceResponseType string

const (
	// ScalingAdviceResponseTypeCreate is used when the scaling advice is created.
	ScalingAdviceResponseTypeCreate ScalingAdviceResponseType = "Create"
	// ScalingAdviceResponseTypeUpdate is used when the scaling advice is updated.
	ScalingAdviceResponseTypeUpdate ScalingAdviceResponseType = "Update"
	// ScalingAdviceResponseTypeStatusUpdate is used when the scaling advice status is updated.
	ScalingAdviceResponseTypeStatusUpdate ScalingAdviceResponseType = "UpdateStatus"
	// ScalingAdviceResponseTypeComplete is used when the scaling advice generation is completed.
	ScalingAdviceResponseTypeComplete ScalingAdviceResponseType = "Complete"
)

// ScalingAdviceRequest encapsulates the request parameters for generating scaling advice.
type ScalingAdviceRequest struct {
	// ID is the unique identifier for the request.
	ID string
	// CorrelationID is the correlation identifier for the request, used to correlate a request and one or more responses.
	CorrelationID string
	// Constraint is the cluster scaling constraint using which the scaling advice is generated.
	Constraint corev1alpha1.ClusterScalingConstraint
	// Snapshot is the snapshot of the resources in the cluster at the time of the request.
	Snapshot ClusterSnapshot
	// Feedback captures feedback from the consumer of the scaling advice, which can be used to improve future scaling advice generation.
	Feedback *corev1alpha1.ClusterScalingFeedback
}

// ScalingAdviceResponse encapsulates the response from the scaling advisor service.
type ScalingAdviceResponse struct {
	// RequestID is the Request unique identifier for which this response is generated.
	RequestID string
	// CorrelationID is the correlation identifier for the request, used to correlate this response with the request.
	CorrelationID string
	// ResponseType indicates the type of response being sent.
	ResponseType ScalingAdviceResponseType
	// Message is a human-readable message providing additional context about the response.
	Message string
	// ScalingAdvice contains the scaling advice generated by the scaling advisor service.
	ScalingAdvice *corev1alpha1.ClusterScalingAdvice
}

// ScalingAdvisorServiceConfig holds the configuration for the scaling advisor service.
type ScalingAdvisorServiceConfig struct {
	// MinKAPIConfig holds the configuration for the MinKAPI server used by the scaling advisor service.
	MinKAPIConfig mkapi.MinKAPIConfig
	// SchedulerConfigPath is the path to the kube-scheduler configuration file.
	SchedulerConfigPath string
	// MaxConcurrentSimulations is the maximum number of concurrent simulations that can be run by the scaling advisor service.
	MaxConcurrentSimulations int
}

// ScalingAdviceResponseFn is a callback function which is invoked by the scaling advisor service when generating scaling advice.
// The callback maybe invoked zero or more times during the generation of scaling advice with callbackType representing the type of change in the scaling advice.
type ScalingAdviceResponseFn func(response ScalingAdviceResponse) error

// ScalingAdvisorService defines the interface for the scaling advisor service.
type ScalingAdvisorService interface {
	// GenerateScalingAdvice generates scaling advice based on the provided request and invokes the responseFn callback with the generated advice.
	GenerateScalingAdvice(ctx context.Context, request ScalingAdviceRequest, responseFn ScalingAdviceResponseFn) error
}

// SchedulerLaunchParams holds the parameters required to launch a kube-scheduler instance.
type SchedulerLaunchParams struct {
	// Client is the Kubernetes client used to interact with the cluster.
	Client kubernetes.Interface
	// DynClient is the dynamic Kubernetes client used to interact with the cluster.
	DynClient dynamic.Interface
	// InformerFactory is the shared informer factory used to create informers for the cluster resources.
	InformerFactory informers.SharedInformerFactory
	// DynInformerFactory is the dynamic shared informer factory used to create informers for the cluster resources.
	DynInformerFactory dynamicinformer.DynamicSharedInformerFactory
	// EventSink is the event sink used to send events from the kube-scheduler.
	EventSink events.EventSink
}

// SchedulerLauncher defines the interface for launching a kube-scheduler instance.
// There will be limited number of kube-scheduler instances that can be launched at a time.
type SchedulerLauncher interface {
	// Launch launches and runs an embedded scheduler instance asynchronously.
	// If the limit of running schedulers is reached, it will block.
	// An error is returned if the scheduler fails to start.
	Launch(ctx context.Context, params *SchedulerLaunchParams) (SchedulerHandle, error)
}

// SchedulerHandle defines the interface for managing a kube-scheduler instance.
type SchedulerHandle interface {
	// Stop stops the scheduler instance.
	Stop()
	// GetParams returns the parameters used to launch the scheduler instance.
	GetParams() SchedulerLaunchParams
}

// ClusterSnapshot represents a snapshot of the cluster at a specific time and encapsulates the scheduling relevant information required by the kube-scheduler.
type ClusterSnapshot struct {
	// Pods are the pods that are present in the cluster.
	Pods []PodInfo
	// Nodes are the nodes that are present in the cluster.
	Nodes []NodeInfo
	// PriorityClasses are the priority classes that are present in the cluster.
	PriorityClasses []schedulingv1.PriorityClass
	// RuntimeClasses are the runtime classes that are present in the cluster.
	RuntimeClasses []nodev1.RuntimeClass
}

// PodInfo contains the minimum set of information about corev1.Pod that will be required by the kube-scheduler.
// NOTES:
//  1. PodSchedulingGates is not part of PodInfo. It is expected that pods having scheduling gates will be filtered out before setting up simulation runs.
//  2. Consider including PodSpec.Resources in future when it graduates to beta/GA.
type PodInfo struct {
	ResourceMeta
	// AggregatedRequests is an aggregated resource requests for all containers of the Pod.
	AggregatedRequests corev1.ResourceList
	// Volumes are the volumes that are attached to the Pod.
	Volumes []corev1.Volume `json:"volumes"`
	// NodeSelector is the node selector for the Pod.
	NodeSelector map[string]string
	// NodeName is the name of the node where the Pod is scheduled.
	NodeName string
	// Affinity is the affinity rules for the Pod.
	Affinity *corev1.Affinity
	// SchedulerName is the name of the scheduler that should be used to schedule the Pod.
	SchedulerName string
	// Tolerations are the tolerations for the Pod.
	Tolerations []corev1.Toleration
	// PriorityClassName is the name of the priority class that should be used to schedule the Pod.
	PriorityClassName         string
	Priority                  *int32
	PreemptionPolicy          *corev1.PreemptionPolicy
	RuntimeClassName          *string
	Overhead                  corev1.ResourceList
	TopologySpreadConstraints []corev1.TopologySpreadConstraint
	ResourceClaims            []corev1.PodResourceClaim
}

// NodeInfo contains the minimum set of information about corev1.Node that will be required by the kube-scheduler.
type NodeInfo struct {
	ResourceMeta
	// Unschedulable indicates whether the node is unschedulable.
	Unschedulable bool
	// Taints are the node's taints.
	Taints []corev1.Taint
	// Capacity is the total resource capacity of the node.
	Capacity corev1.ResourceList
	// Allocatable is the allocatable resource capacity of the node.
	Allocatable corev1.ResourceList
	// CSIDriverVolumeMaximums is a map of CSI driver names to the maximum number of unique volumes managed by the
	// CSI driver that can be used on a node.
	CSIDriverVolumeMaximums map[string]int32
}

type ResourceMeta struct {
	// UID is the unique identifier for the resource.
	UID string
	types.NamespacedName
	// Labels are the labels associated with the resource.
	Labels map[string]string
	// DeletionTimestamp is the timestamp when the resource deletion was triggered.
	DeletionTimestamp time.Time
}
